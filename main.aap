########################################################################
#
# aap build rules
#
# Optional settings:
#
#     Build=fast     compile (or test or install) optimized version
#     Tool=intelcc   build with the Intel C++ compiler
#
# $Id$
#
########################################################################

LigaSources +=
        Atom_t.cpp AtomCost.cpp AtomFilter_t.cpp AtomSequence.cpp
        LigaUtils.cpp Counter.cpp DistanceTable.cpp Division_t.cpp
        Liga_t.cpp Molecule.cpp ParseArgs.cpp Random.cpp
        RegisterSVNId.cpp TrialDistributor.cpp

TestedSources +=
        $LigaSources
        PointsInSphere.cpp Lattice.cpp R3linalg.cpp Crystal.cpp

Tests ?= `glob('Test*.cpp')`
# temporary disable TestCrystalCost
Tests = `[f for f in var2list(Tests) if f != "TestCrystalCost.cpp" ]`

LocalInclude +=
        $HOME/programs/include $HOME/include
        /usr/local/include /u24/local/include
LocalInclude = `[d for d in var2list(LocalInclude) if os.path.isdir(d)]`

prefix ?= `os.environ['HOME']`
PREFIX = $prefix
Bdir ?= AAPDIR
BDIR = $Bdir/$BDIR
CLEANFILES += *.o core.[0-9]* gizaliga-fast alltests-fast

:python
    def defaultTool():
        """Return default C++ compiler.
        """
        if program_path("icpc"):
            tool = "intelcc"
        else:
            tool = "gcc"
        return tool
Tool ?= `defaultTool()`

@if Tool == "intelcc":
    CXX = icpc
    CXXFLAGS += -w1
    ExtraDebug =
    ExtraOptim = -fast -axTW
@else:
    CXXFLAGS += -Wall
    ExtraDebug = -gstabs+
    ExtraOptim = -ffast-math

@if has_build_target():
    :syseval gsl-config --cflags | :assign GSLInclude
    :syseval gsl-config --libs | :assign GSLLibs
    :syseval pkg-config --libs blitz | :assign BlitzLibs
    INCLUDE += $GSLInclude -I$*LocalInclude
    LIBS += $GSLLibs $BlitzLibs

:attribute {check = c_md5} *.cpp *.hpp
:attribute {check = none} $HOME/include/blitz/*

:variant Build
    debug
        OPTIMIZE = 0
        DEBUG = yes
        CXXFLAGS += $ExtraDebug

    fast
        DEFINE += -DNDEBUG
        OPTIMIZE = 3
        CXXFLAGS += $ExtraOptim
        EXESUF = -fast

########################################################################
# build targets
########################################################################

all \
{comment = build gizaliga, the standard target} : \
    gizaliga

:program gizaliga \
{comment = program for structure solution from pair distances} \
{var_LD = $CXX} :
    gizaliga.cpp RunPar_t.cpp $LigaSources

:program mcfitdist \
{comment = MC shuffling of atoms} :
    mcfitdist.cpp $LigaSources

:program relaxatoms \
{comment = cluster relaxation program} :
    relaxatoms.cpp $LigaSources

:program alltests \
{comment = build unit tests} \
{add_LIBS = -lcppunit -ldl} \
{var_LD = $CXX} :
    alltests.cpp $TestedSources $Tests

########################################################################
# tests
########################################################################

test { comment = exectute all run tests and unit tests } : \
    runtest unittest
        :print  -----------------
        :print  All tests passed!
        :print  -----------------

runtest { virtual } { comment = test gizaliga on shapes and solids } : \
    gizaliga runtest-solids runtest-shapes runtest-bangle_range

GL = ./gizaliga$EXESUF
GLTestOptions = maxcputime=1 seasontrials=500

runtest-solids :
    @for f in ("tetrahedron.dst", "octahedron.dst", "cube.dst", \
            "icosahedron.dst", "dodecahedron.dst"):
        :sys {log} $GL $GLTestOptions solids/$f

runtest-shapes :
    @for f in ("square.dst", "pentagon.dst", \
            "hexagon.dst", "heptagon.dst", "octagon.dst"):
        :sys {log} $GL $GLTestOptions ndim=2 shapes/$f

runtest-bangle_range :
    :sys {log} $GL $GLTestOptions shapes/square.dst bangle_range=1.5,80
    @pass
    :sys {log} $GL $GLTestOptions shapes/hexagon.dst bangle_range=1.5,110

unittest { comment = execute Liga unit tests} : alltests
        :sys ./alltests${EXESUF}

# End of file
