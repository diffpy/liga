########################################################################
# Short Title: aap rules for Biosphere Genetic Algorithm
#
# Comments:
#
# $Id$
########################################################################

########################################################################
CXXFLAGS += -Wall -Wno-sign-compare
INCLUDE = -I/u24/local/include
LD = $CXX
LDFLAGS = -L/u24/local/lib -lgsl -lgslcblas

Sources = BGAlib.cpp BGAutils.cpp ParseArgs.cpp
Scripts = dvar.py coord.py
prefix ?= `os.environ['HOME']`
PREFIX = $prefix
BDIR = AAPDIR/$BDIR

all: gizaliga

:variant Build
    debug
        OPTIMIZE = 0
        DEBUG = yes
        CXXFLAGS += -gstabs+

    fast
        OPTIMIZE = 3
        CXXFLAGS += -ffast-math
        EXESUF = -fast

:program gizaliga : gizaliga.cpp $Sources

:program djoser : djoser.cpp $Sources

test { comment = test gizaliga on shapes and solids } : \
    gizaliga-test-solids gizaliga-test-shapes
        :print  -----------------
        :print  All tests passed!
        :print  -----------------

GL=./gizaliga
@if Build == "fast":
    GL=./gizaliga-fast

gizaliga-test-solids :
    @for f in ("tetrahedron.dst", "octahedron.dst", "cube.dst", \
            "icosahedron.dst", "dodecahedron.dst"):
        :sys {log} $GL maxcputime=1 solids/$f

gizaliga-test-shapes :
    @for f in ("square.dst", "hexagon.dst", "heptagon.dst", "octagon.dst"):
        :sys {log} $GL maxcputime=1 pyr_trials=0 shapes/$f

install-py { comment = install python scripts } :
    @install_files('bin', _no.Scripts, '0755')

# ifdef FAST
# # FAST version runs about 2 times faster
# CPPFLAGS = -O3 -ffast-math -I/u24/local/include $(CFLAGS)
# else
# CPPFLAGS = -gstabs+ -I/u24/local/include $(CFLAGS)
# endif
# LDFLAGS = -L/u24/local/lib -lgsl -lgslcblas
# 
# # PROGRAMS = darwin mrmcpfl c60gradmin plotstrupdf plain2eye eye2plain
# PROGRAMS = djoser gizaliga
# TESTS   = $(patsubst %.cpp,%,$(wildcard *Test*.cpp))
# SOURCES = BGAlib.cpp BGAutils.cpp ParseArgs.cpp
# HEADERS = $(SOURCES:%.cpp=%.hpp)
# OBJECTS = $(SOURCES:%.cpp=%.o)
# 
# ########################################################################
# # most common targets:
# all:	 	BGAlib.o
# # all:	 	$(PROGRAMS)
# # all:	 	tests
# lib_objects: $(OBJECTS)
# 
# ########################################################################
# # simulations {{{
# %.o: %.cpp %.hpp
# 	$(COMPILE.cpp) $(OUTPUT_OPTION) $<
# 
# djoser: djoser.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# gizaliga: gizaliga.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# mcfitdist: mcfitdist.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# #####################################################################}}}
# # test programs {{{
# 
# test: gizaliga-test-solids gizaliga-test-shapes
# 	@echo
# 	@echo "-----------------"
# 	@echo "All tests passed!"
# 	@echo "-----------------"
# 
# gizaliga-test-solids:
# 	./gizaliga maxcputime=1 solids/tetrahedron.dst
# 	./gizaliga maxcputime=1 solids/octahedron.dst
# 	./gizaliga maxcputime=1 solids/cube.dst
# 	./gizaliga maxcputime=1 solids/icosahedron.dst
# 	./gizaliga maxcputime=1 solids/dodecahedron.dst
# 
# gizaliga-test-shapes:
# 	./gizaliga maxcputime=1 pyr_trials=0 shapes/square.dst
# 	./gizaliga maxcputime=1 pyr_trials=0 shapes/hexagon.dst
# 	./gizaliga maxcputime=1 pyr_trials=0 shapes/heptagon.dst
# 	./gizaliga maxcputime=1 pyr_trials=0 shapes/octagon.dst
# 
# tests: $(TESTS)
# 
# ssTest01: ssTest01.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# molTest01: molTest01.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# molTest02: molTest02.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# molTest03: molTest03.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# molTest04: molTest04.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# molTest05: molTest05.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# molTest06: molTest06.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# molTest07: molTest07.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# molTest08: molTest08.o BGAlib.o BGAutils.o $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# molTest09: molTest09.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# #
# # molTest10: molTest10.o $(OBJECTS) $(HEADERS)
# # 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# popTest01: popTest01.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# # popTest02: popTest02.o $(OBJECTS) $(HEADERS)
# # 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# #
# # popTest03: popTest03.o $(OBJECTS) $(HEADERS)
# # 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# libTest01: libTest01.o $(OBJECTS) $(HEADERS)
# 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# # libTest02: libTest02.o $(OBJECTS) $(HEADERS)
# # 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# #
# # libTest03: libTest03.o $(OBJECTS) $(HEADERS)
# # 	$(CXX) -o $@ $@.o $(OBJECTS) $(LDFLAGS)
# 
# #####################################################################}}}
# # utility targets {{{
# tags:	$(SOURCES) $(HEADERS) $(PROGRAMS:%=%.cpp)
# 	ctags $^
# 
# clean:
# 	rm -f $(PROGRAMS) $(OBJECTS) $(PROGRAMS:%=%.o) \
# 	    a.out \
# 	    $(TESTS) $(TESTS:%=%.o) \
# 	    core.[1-9]* \
# 	    *.pyc
# 
# list:
# 	@printf "PROGRAMS:\n"
# 	@printf "  %s\n" $(PROGRAMS)
# 	@printf "HEADERS:\n"
# 	@printf "  %s\n" $(HEADERS)
# 	@printf "SOURCES:\n"
# 	@printf "  %s\n" $(SOURCES)
# 	@printf "TESTS:\n"
# 	@printf "  %s\n" $(TESTS:%=%.cpp)
# 
# 
# #}}}
# 
# # set foldmethod=marker:
