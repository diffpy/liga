########################################################################
# Short Title: aap rules for single element liga algorithm
#
# Comments:
#
# $Id$
########################################################################

########################################################################

LigaSources =
        AtomCost.cpp BGAlib.cpp BGAutils.cpp Division_t.cpp
        Liga_t.cpp ParseArgs.cpp RegisterSVNId.cpp RunPar_t.cpp
        TrialDistributor.cpp

TestedSources =
        $LigaSources
        PointsInSphere.cpp Counters.cpp Lattice.cpp R3linalg.cpp

Tests ?= Test*.cpp

Scripts = dvar.py coord.py uniqdst.py
prefix ?= `os.environ['HOME']`
PREFIX = $prefix
Bdir ?= AAPDIR
BDIR = $Bdir/$BDIR
CLEANFILES += *.o core.[0-9]* gizaliga-fast alltests-fast

:python
    def buildOnHPC():
        from os import uname
        from socket import gethostname
        onhpc = gethostname() in ('white','green') and uname()[-1] == 'ia64'
        return onhpc

CXXFLAGS += -Wall
@if buildOnHPC():
    CXX ?= icpc
    EXTRA_OPTIM = -fast
@else:
    EXTRA_DEBUG = -gstabs+
    EXTRA_OPTIM = -ffast-math

:syseval gsl-config --cflags | :assign GSLInclude
:syseval gsl-config --libs | :assign GSLLibs
:syseval pkg-config --libs blitz | :assign BlitzLibs
INCLUDE += $GSLInclude -I$(HOME)/programs/include
LIBS += $GSLLibs $BlitzLibs

:variant Build
    debug
        OPTIMIZE = 0
        DEBUG = yes
        CXXFLAGS += $EXTRA_DEBUG

    fast
        DEFINE += -DNDEBUG
        OPTIMIZE = 3
        CXXFLAGS += $EXTRA_OPTIM
        EXESUF = -fast

########################################################################
# build targets
########################################################################

all: gizaliga

:program gizaliga \
{comment = soccer league of pyramid builders} \
{var_LD = $CXX} :
    gizaliga.cpp $LigaSources

:program mcfitdist \
{comment = MC shuffling of atoms} :
    mcfitdist.cpp $LigaSources

:program relaxatoms \
{comment = cluster relaxation program} :
    relaxatoms.cpp $LigaSources

:program alltests \
{comment = build unit tests} \
{add_LIBS = -lcppunit -ldl} \
{var_LD = $CXX} :
    alltests.cpp $TestedSources $Tests

########################################################################
# tests
########################################################################

test { comment = exectute all run tests and unit tests } : \
    runtest unittest
        :print  -----------------
        :print  All tests passed!
        :print  -----------------

runtest { virtual } { comment = test gizaliga on shapes and solids } : \
    gizaliga runtest-solids runtest-shapes runtest-bangle_range

gl = ./gizaliga$EXESUF
runtest_options = maxcputime=1 seasontrials=500

runtest-solids :
        solids = tetrahedron.dst octahedron.dst cube.dst \
                 icosahedron.dst dodecahedron.dst
        @for f in var2list(solids):
            :sys {log} $gl $runtest_options solids/$f

runtest-shapes :
        shapes = square.dst pentagon.dst hexagon.dst heptagon.dst octagon.dst
        @for f in var2list(shapes):
            :sys {log} $gl $runtest_options ndim=2 shapes/$f

runtest-bangle_range :
        :sys {log} $gl $runtest_options shapes/square.dst bangle_range=1.5,80
        :sys {log} $gl $runtest_options shapes/hexagon.dst bangle_range=1.5,110

unittest { comment = execute Liga unit tests} : alltests
        :sys ./alltests${EXESUF}

install-py { comment = install python scripts } :
        @install_files('bin', _no.Scripts, '0755')

# End of file
