#!/bin/zsh -f

########################################################################
# Short Title: MC parallel tempering script
#
# Comments: zsh wrapper for running mcfitdist with parallel tempering
#
# $Id$
########################################################################

setopt no_bgnice extended_glob numeric_glob_sort
PROGNAME=${0:t}
PROGCVSID='$Id$'

# defaults:
mcfitdist=( ${0:h}/mcfitdist*~*fast*(.xN) ${0:h}/mcfitdist*-fast(.xN) )
mcfitdist=${mcfitdist[-1]}
kbt=( 0.1 0.05 0.02 0.01 0.005 0.002 0.001 )
maxcputime=30
randseed=1
distfile=
inistru=
outstru=

########################################################################
print_help()
{
    print -l \
      "usage: ${PROGNAME} [DISTFILE] [inistru] [par1=val1...]" \
      "run parallel-tempering mcfitdist fits using distances from DISTFILE." \
      "Arguments are passed to mcfitdist with the exception of parameters" \
      "for parallel tempering." \
      "Options:" \
      "  -h, --help         display this message" \
      "  -v, --version      show program version" \
      "Tempering parameters:"
    print -aC2 \
      "  mcfitdist=EXEFILE" "[${mcfitdist}]" \
      "  kbt=T1,T2,..."     "[${(j:, :)kbt}] " \
      "  maxcputime=double" "[${maxcputime}] maximum time at one temperature" \
      "  randseed=bool"     "[${randseed}] randomize random seed"
}

########################################################################
print_version()
{
    print $PROGCVSID
}

########################################################################
print_pars()
{
    HASHLINE=${(l:72::#:):-}
    print $HASHLINE
    print    "# $PROGNAME"
    print    "# $PROGCVSID"
    print    "# $HOST"
    print -P "# %D{%c}"
    print $HASHLINE
    print    "mcfitdist=${mcfitdist}"
    print    "kbt=${(j:,:)kbt}"
    print    "maxcputime=$maxcputime"
    print    "randseed=$randseed"
    print $HASHLINE
    print
}

########################################################################
parse_args()
{
    typeset -ga mcfitdist_args
    if [[ $# == 0 ]]; then
	print_help
	exit
    fi
    for a; do
        if [[ $a == ?*=* ]]; then
            local par=${a%%[=]*}
            local val=${a#${par}[=]}
            case $par in
            (mcfitdist|kbt|maxcputime|outstru)
                eval $a
                continue
                ;;
            (randseed)
                if [[ ${(L)val} == (0|n|no|false) ]]; then
                    randseed=
                else
                    randseed=1
                fi
                continue
                ;;
            (kbt)
                kbt=( ${(s:,:)val} )
                continue
                ;;
	    (distfile)
		eval $a
		;;
	    (inistru)
		eval $a
		continue
		;;
            esac
	elif [[ $a == (-h|--help) ]]; then
	    print_help
	    exit
	elif [[ $a == (-v|--version) ]]; then
	    print_version
	    exit
	elif [[ -z $distfile ]]; then
	    distfile=$a
	else
	    inistru=$a
	    continue
        fi
        mcfitdist_args+=$a
    done
    mcpt_outstru=( ${outstru:h}/${PROGNAME}-${HOST}-$$-kbt{1..${#kbt}}.tmp )
}

########################################################################
# main
########################################################################

parse_args "$@"
print_pars

# do the initial run, thus make sure all mcpt_outstru files are created
integer tidx
for tidx in {1..${#kbt}};
do
    # build a full list of arguments
    all_args=(
	$mcfitdist_args
	${inistru}
	kbt=${kbt[tidx]}
	maxcputime=$maxcputime
	outstru=${mcpt_outstru[tidx]}
	${randseed:+"seed=$RANDOM"}
    )
    $mcfitdist $all_args
    MCSTATUS=$?
    if [[ $MCSTATUS == 0 ]]; then
	[[ -n $outstru ]] && cp ${mcpt_outstru[tidx]} $outstru
	rm -f ${mcpt_outstru}
	exit
    elif [[ $MCSTATUS != 1 ]]; then
	exit $MCSTATUS
    fi
    print
done

# main loop
integer tround=0
while true;
do
    (( tround++ ))
    # perform parallel tempering
    dvar=( $( dvar.py $distfile $mcpt_outstru | sed 's/.*[[:blank:]]//' ) )
    integer min_idx=1
    float min_val=${dvar[1]}
    for i in {1..${#kbt}}; do
	if (( ${dvar[i]} < min_val )); then
	    min_val=${dvar[i]}
	    min_idx=$i
	fi
    done
    print "Tempering exchange"
    print "$tround BT $i ${dvar[$i]}"
    [[ -n $outstru ]] && cp ${mcpt_outstru[$i]} $outstru
    # compare results at different temperature
    integer idxthi idxtlo
    for idxthi in {1..$(( ${#kbt}-1 ))};
    do
	(( idxtlo = idxthi + 1 ))
	if (( ${dvar[idxthi]} < ${dvar[idxtlo]} ));
	then
	    print "$tround PT $idxtlo ${dvar[idxtlo]} $idxthi ${dvar[idxthi]}"
	    cp ${mcpt_outstru[$idxthi]} ${mcpt_outstru[$idxtlo]}
	else
	    print "$tround PT $idxthi ${dvar[idxthi]} $idxtlo ${dvar[idxtlo]}"
	    cp ${mcpt_outstru[$idxtlo]} ${mcpt_outstru[$idxthi]}
	fi
    done
    print
    # perform MC runs at fixed temperature
    for tidx in {1..${#kbt}};
    do
	# build a full list of arguments
	all_args=(
	    $mcfitdist_args
	    kbt=${kbt[tidx]}
	    maxcputime=$maxcputime
	    inistru=${mcpt_outstru[tidx]}
	    outstru=${mcpt_outstru[tidx]}
	    ${randseed:+"seed=$RANDOM"}
	)
	$mcfitdist $all_args
	MCSTATUS=$?
	if [[ $MCSTATUS == 0 ]]; then
	    [[ -n $outstru ]] && cp ${mcpt_outstru[tidx]} $outstru
	    rm -f ${mcpt_outstru}
	    exit
	elif [[ $MCSTATUS != 1 ]]; then
	    exit $MCSTATUS
	fi
	print
    done
done

########################################################################
# Too see what people have been up to just run:
#   cvs log
########################################################################
