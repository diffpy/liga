#!/u24/local/bin/zsh -f

setopt extendedglob

# setup:
: ${REPEATS:=50}
TIMEFMT="%U"
typeset -TU DISTANCE_FILES distance_files
if [[ ${#distance_files} == 0 ]]; then
    distance_files=(
        solids/tetrahedron.dst
        solids/octahedron.dst
        solids/cube.dst
        solids/icosahedron.dst
        solids/dodecahedron.dst
        solids/prism12.dst
        solids/prismL16.dst
        solids/prism18.dst
    #   solids/grid27.dst
    )
fi

if [[ $# == 0 || -n "${(M)*:#--help}" ]]; then
    print "usage: $0:t CmdToBench [SEED] DISTFILE arg1 arg2 ..."
    print "where SEED will be replaced with RANDOM integer and"
    print "DISTFILE will be replaced with following distance table files"
    print -c '  '${^distance_files}
    print "this list can be changed by exporting DISTANCE_FILES variable"
    exit
fi

typeset -A bghost_cputimes
# calibrated cpu times from cputime20050619.dat
bghost_cputimes=(
    romaioi.pa.msu.edu       0.792
    poirot.pa.msu.edu        0.860
    bg.pa.msu.edu            0.907
    emperor.pa.msu.edu       0.932
    donut.pa.msu.edu         0.933
    wobble.pa.msu.edu        0.938
    kneesave.pa.msu.edu      0.960
    valentino.pa.msu.edu     1.000
)
if [[ ${+bghost_cputimes[$HOST]} == 0 ]]; then
    print -u2 "CPU time not calibrated on $HOST"
    exit 1
fi
float -F3 cpu1s=${bghost_cputimes[$HOST]}
float -F3 cpuscale=$(( 1.0 / cpu1s ))

CMD=$1
if [[ ! -x $CMD ]]; then
    print -u2 -- "cannot execute ${CMD}"
    exit 1
fi

par=( "${(@)argv[2,-1]}" )
if [[ -z ${(M)par:#DISTFILE} ]]; then
    print -u2 -- "warning: no DISTFILE among arguments"
    exit 1
fi

results=( DISTFILE user sigma )
TMPLOG=/tmp/benchmolfind$$-${USERNAME}
trap "rm -f $TMPLOG; exit 2" HUP QUIT SEGV TERM INT

exec 3<&1 4<&2
print "#bm $HOST"
print -P "#bm %D{%c}"
print "#bm timing $CMD $par"
for df in $distance_files;
do
    exec 5>$TMPLOG
    for i in {1..$REPEATS}; : $RANDOM
	UT=$( 2>&1 time (
	    for i in {1..$REPEATS};
	    do
		SEED=$RANDOM
		p=( "${(@)par/SEED/$SEED}" )
		p=( "${(@)p/DISTFILE/$df}" )
		print "#bm $i of $REPEATS timings for $df"
		print "#bm $CMD $p"
		$CMD "${(@)p}"
		status=$?
		if [[ $status -gt 128 ]]; then
		    exit $status
		fi
	    done 1>&3 2>&4 1>&5
	    )
	) || break
    exec 5>&-
    print "#bm $UT\n"
    float -F3 AVGvalentinoT=$(( cpuscale * ${UT%s} / REPEATS ))
    float -F3 STDvalentinoT=$(( cpuscale * $(
	    grep '^UserCPUtime' $TMPLOG |
	    awk	'{ n++; x = 0.0+$3; sx += x; sxx += x*x; }
		END {
		    sigma = 0.0;
		    if (n>1) {
			sigma = sqrt( (sxx - 1.0*sx*sx/n)/((n-1)*n) );
		    }
		    print sigma;
		}'
    ) ))
    results=( $results ${df:t} $AVGvalentinoT "(${STDvalentinoT})" )
done
rm -f $TMPLOG

print "#bm scaling ${HOST%%.*} CPU times with ${cpuscale} = 1.0/${cpu1s}"

print
print "================================================================"
print "$CMD $par"
print "================================================================"
print -aC3 $results
print
